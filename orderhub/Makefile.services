
##--------------------------------------------------------------------------------------------------
##  --- Run Services, Stop Services, Look at logs  ---
##--------------------------------------------------------------------------------------------------

.PHONY: orderapi.start
orderapi.start: ## üöÄ Start the Order API service
	@echo "üöÄ Starting Order API service..."
	@nohup ./gradlew :services:order-service-api:bootRun > /tmp/orderapi.log 2>&1 & echo $$! > /tmp/orderapi.pid && \
	echo "‚úÖ Order API running (log: /tmp/orderapi.log, pid: `cat /tmp/orderapi.pid`)"

.PHONY: orderapi.stop
orderapi.stop: ## ‚ùå Stop the Order API service
	@kill `cat /tmp/orderapi.pid` 2>/dev/null || echo "Order API not running"
	@rm -f /tmp/orderapi.pid

.PHONY: orderapi.logs
orderapi.logs: ## üìÑ Tail logs for Order API
	@echo "üìÑ Tailing /tmp/orderapi.log ..."
	@tail -f /tmp/orderapi.log

.PHONY: orderprocessor.start
orderprocessor.start: ## ‚öôÔ∏è Start the Order Processor service
	@echo "‚öôÔ∏è  Starting Order Processor service..."
	@nohup ./gradlew :services:order-processor-service:bootRun > /tmp/orderprocessor.log 2>&1 & echo $$! > /tmp/orderprocessor.pid && \
	echo "‚úÖ Order Processor running (log: /tmp/orderprocessor.log, pid: `cat /tmp/orderprocessor.pid`)"

.PHONY: orderprocessor.stop
orderprocessor.stop: ## ‚ùå Stop the Order Processor service
	@kill `cat /tmp/orderprocessor.pid` 2>/dev/null || echo "Order Processor not running"
	@rm -f /tmp/orderprocessor.pid

.PHONY: orderprocessor.logs
orderprocessor.logs: ## üìÑ Tail logs for Order Processor
	@echo "üìÑ Tailing /tmp/orderprocessor.log ..."
	@tail -f /tmp/orderprocessor.log

.PHONY: orderprocessor.sqs.peek
orderprocessor.sqs.peek: ## üîç Peek into messages from 'order-processor-queue'
	@echo "üîç Reading messages from order-processor-queue..."
	@$(AWS_CLI_DOCKER_RUN) sqs receive-message \
		--queue-url "http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/order-processor-queue" \
		--endpoint-url $(LOCALSTACK_URL) \
		--region us-east-1 \
		--max-number-of-messages 10 \
		--visibility-timeout 0 \
		--wait-time-seconds 1 \
		|| echo "‚ùå No messages found."

.PHONY: orderprocessor.sqs.purge
orderprocessor.sqs.purge: ## üßπ Purge all messages from 'order-processor-queue'
	@echo "üßπ Purging messages from order-processor-queue..."
	@$(AWS_CLI_DOCKER_RUN) sqs purge-queue \
		--queue-url "http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/order-processor-queue" \
		--endpoint-url $(LOCALSTACK_URL) \
		--region us-east-1 \
		&& echo "‚úÖ Queue purged." || echo "‚ùå Failed to purge queue."

.PHONY: notification.start
notification.start: ## üì£ Start the Notification service
	@echo "üì£ Starting Notification service..."
	@nohup ./gradlew :services:notification-service:bootRun > /tmp/notification.log 2>&1 & echo $$! > /tmp/notification.pid && \
	echo "‚úÖ Notification running (log: /tmp/notification.log, pid: `cat /tmp/notification.pid`)"

.PHONY: notification.stop
notification.stop: ## ‚ùå Stop the Notification service
	@kill `cat /tmp/notification.pid` 2>/dev/null || echo "Notification not running"
	@rm -f /tmp/notification.pid

.PHONY: notification.logs
notification.logs: ## üìÑ Tail logs for Notification Service
	@echo "üìÑ Tailing /tmp/notification.log ..."
	@tail -f /tmp/notification.log

.PHONY: notification.sqs.peek
notification.sqs.peek: ## üîç Peek into messages from 'notification-queue'
	@echo "üîç Reading messages from notification-queue..."
	@$(AWS_CLI_DOCKER_RUN) sqs receive-message \
		--queue-url "http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/notification-queue" \
		--endpoint-url $(LOCALSTACK_URL) \
		--region us-east-1 \
		--max-number-of-messages 10 \
		--visibility-timeout 0 \
		--wait-time-seconds 1 \
		|| echo "‚ùå No messages found."

.PHONY: notification.sqs.purge
notification.sqs.purge: ## üßπ Purge all messages from 'order-processor-queue'
	@echo "üßπ Purging messages from order-processor-queue..."
	@$(AWS_CLI_DOCKER_RUN) sqs purge-queue \
		--queue-url "http://sqs.us-east-1.localhost.localstack.cloud:4566/000000000000/notification-queue" \
		--endpoint-url $(LOCALSTACK_URL) \
		--region us-east-1 \
		&& echo "‚úÖ Queue purged." || echo "‚ùå Failed to purge queue."

.PHONY: sqs.purge
sqs.purge: notification.sqs.purge orderprocessor.sqs.purge ## üßπ Purge all messages from all the queues

.PHONY: services.stop
services.start: notification.start orderprocessor.start orderapi.start ## üöÄ Start all services

.PHONY: services.stop
services.stop: notification.stop orderprocessor.stop orderapi.stop ## ‚ùå Stop all services
##--------------------------------------------------------------------------------------------------
